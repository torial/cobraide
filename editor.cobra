use Qios.DevSuite.Components
use System.Windows.Forms from System.Windows.Forms
use ICSharpCode.TextEditor
use ICSharpCode.TextEditor.Document
use System.ComponentModel
use System.Drawing
use System.Diagnostics

class Project
    pro references from var = List<of String>()
    pro files from var = List<of String>()
    pro name from var = "New Project"
    pro fileName from var = ""
    
    cue init
        base.init
    
    def save
        pass
        
    def load
        pass

class FindAndReplaceForm inherits Form
    def showFor(editor as TextEditorControl, isReplacing as bool)
        pass
    def findNext(unknown as bool, isReverse as bool, errMsg as String)
        pass
    
    pro lookFor from var= ""
    

#Many changes inspired by TextEditor sample on CodeProject.  Including the Folding Strategy
class CobraFoldingStrategy implements IFoldingStrategy
    def generateFoldMarkers(document as IDocument, fileName as String?, parseInfo as Object?) as List<of FoldMarker>
        result = List<of FoldMarker>()
            
        blockCommentStartLines = Stack<of int>()
        regionStartLines = Stack<of int>()
        blockStartLines = Stack<of KeyValuePair<of int,int>>()
        
        inBlockComment = false
        
        for iLine in document.totalNumberOfLines
            seg = document.getLineSegment(iLine)
            line = document.getText(seg)
            trimmed = line.trim
            currentIndent = line.length - trimmed.length
            
            #The block comment WILL fail in the following scenarios:
            #    #/    /# some stuff... a few lines #/
            if trimmed.contains("/#") and not trimmed.startsWith("#")
                inBlockComment = true
                blockCommentStartLines.push(iLine)
            if trimmed.contains("#/") and inBlockComment and blockCommentStartLines.count > 0
                inBlockComment = false
                blockStart = blockCommentStartLines.pop
                result.add(FoldMarker(document,blockStart,document.getText(document.getLineSegment(blockStart)).indexOf("/#"),iLine,currentIndent + "#/".length))
                
            else if inBlockComment
                continue #skip over all logic until an end comment is found.
            else if trimmed.startsWith("#region")
                regionStartLines.push(iLine)
            else if trimmed.startsWith("#endregion") and regionStartLines.count > 0
                start = regionStartLines.pop
                result.add(FoldMarker(document,start,document.getLineSegment(start).length,iLine,currentIndent + "#endregion".length))
            else if _isBlockScope(trimmed)
                while blockStartLines.count > 0 and blockStartLines.peek.value >= currentIndent
                    #we know there is another block with the same start, so go ahead and close it out.
                    origStart = blockStartLines.pop
                    kvp = _getPriorNonCommentNonBlankLine(document,iLine)
                    endLine = kvp.key
                    endText = kvp.value
                    result.add(FoldMarker(document,origStart.key,document.getLineSegment(origStart.key).length, endLine,endText.length ))
                
                blockStartLines.push(KeyValuePair<of int,int>(iLine,line.length-trimmed.length))
        
        #close out any unmatched folds
        while blockStartLines.count > 0 
            origStart = blockStartLines.pop
            kvp = _getPriorNonCommentNonBlankLine(document,iLine)
            endLine = kvp.key
            endText = kvp.value
            result.add(FoldMarker(document,origStart.key,document.getLineSegment(origStart.key).length, endLine,endText.length ))
       
        return result

    def _isBlockScope(l as String) as bool
        return l.startsWith("cue ") or l.startsWith("def ") or l.startsWith("ensure") or l.startsWith("require") or l.startsWith("body") or l.startsWith("test") or l.startsWith("class ") or l.startsWith("namespace ")
        
    def _getPriorNonCommentNonBlankLine(document as IDocument, iLine as int) as KeyValuePair<of int,String>
        post while iLine > 0 
            iLine -=1
            #TODO, support block comments /# #/
            line = document.getText(document.getLineSegment(iLine))
            trimmed = line.trim
            if not trimmed.startsWith("#") and not trimmed.length == 0
                return KeyValuePair<of int,String>(iLine,line)
        return KeyValuePair<of int,String>(iLine,"")

class Editor inherits Form
    var _editorSettings as ITextEditorProperties?
    var _findForm = FindAndReplaceForm()
    
    var _properties as PropertyGrid #

    #var _toolStrip as ToolStrip #
    var _menuStrip as QMainMenu #
    var _menuFile as QMenuItem #
    var _menuFileProject as QMenuItem
    var _menuFileProjectSave as QMenuItem #
    var _menuFileProjectSaveAs as QMenuItem #
    var _menuFileProjectOpen as QMenuItem #
    var _menuFileProjectNew as QMenuItem #
    var _menuFileFile as QMenuItem
    var _menuFileSave as QMenuItem #
    var _menuFileSaveAs as QMenuItem #
    var _menuFileQuit as QMenuItem #
    var _menuFileClose as QMenuItem
    var _menuFileOpen as QMenuItem #
    var _menuFileNew as QMenuItem #
    var _menuCompile as QMenuItem #
    var _menuCompileBuild as QMenuItem #
    var _menuCompileTest as QMenuItem #
    var _menuCompileObjectExplorer as QMenuItem #
    var _menuCompileRun as QMenuItem #
   
    var _contextMenu as QContextMenu
   
    var _lblOut as Label
    var _lblOutput as RichTextBox
    
    var _bottomDock as QDockBar
    var _rightDock as QDockBar
    var _leftDock as QDockBar
    var _ioWindow as QDockingWindow
    
    var _projectTree as TreeView
    var _files as TreeNode
    var _references as TreeNode
    var _itemProperties as PropertyGrid
   
    var _tabs as QTabControl #
    var _tabTest as QTabPage  #
    var _tabConfig as QTabPage #
    
    var _components as System.ComponentModel.IContainer? #
    
    get _allEditors as TextEditorControl*
        for tab in _tabs.controls
            for ctrl in tab.controls
                if ctrl.typeOf is TextEditorControl
                    yield ctrl to TextEditorControl
    
    def _activeEditor as TextEditorControl?
        if _tabs.controls.count == 0, return nil
        return _tabs.activeTabPage.controls[0] to TextEditorControl?
    
    #region test
    cue init
        base.init
        .text = "Cobra Editor"
        .width = 800
        .height = 600
        .isMdiContainer = true
        _components = System.ComponentModel.Container()
        listen .formClosing, ref _formClosing
        .initializeDockBars
        .initializeTabs
        #.initializeToolbar
        .initializeMenus
    #endregion
    
    def dispose(disposing as bool) is override, protected
        if disposing and _components is not nil
            _components.dispose
        base.dispose(disposing)


    def initializeDockBars
        _rightDock = QDockBar(parent=this,name="_rightDock",dock=DockStyle.Right)
        projectWindow = QDockingWindow(name="projectWindow",dock=DockStyle.Top,width=200,height=400,text="Solution Explorer")
        projectWindow.owner = this
        #projectWindow.windowGroupName = "Projects"
        _projectTree = TreeView(parent=projectWindow,dock=DockStyle.Fill,name="_projectTree")
        sln = TreeNode(name="Solution",text="Solution")
        _projectTree.nodes.add(sln)
        pj = TreeNode(name="Project",text="Project")
        sln.nodes.add(pj)
        references = TreeNode(name="References",text="References")
        pj.nodes.add(references)
        _references = references
        references.nodes.add(TreeNode(name="DEFAULT:mscorlib.dll",text="mscorlib.dll"))
        references.nodes.add(TreeNode(name="DEFAULT:System.dll",text="System.dll"))
        references.nodes.add(TreeNode(name="DEFAULT:Cobra.Lang",text="Cobra.Lang"))
        files = TreeNode(name="Files",text="Files")
        pj.nodes.add(files)
        _files = files
        _files.expand
        _references.expand
        sln.expand
        pj.expand
        
        propertiesWindow = QDockingWindow(name="propertiesWindow",dock=DockStyle.Bottom,width=200, text="Properties")
        propertiesWindow.canDockOnOtherControlBottom = true
        propertiesWindow.owner = this
        propertiesWindow.dockWindow(_rightDock)
        #projectWindow.dockWindow(_rightDock)
        projectWindow.dockWindow(propertiesWindow,QDockOrientation.Vertical,false)
        #propertiesWindow.windowGroupName = "Projects"
        _itemProperties = PropertyGrid(parent=propertiesWindow,dock=DockStyle.Fill,name="_itemProperties")
        _itemProperties.selectedObject = projectWindow
        _leftDock = QDockBar(parent=this,name="_leftDock",dock=DockStyle.Left)
        _bottomDock = QDockBar(parent=this,name="_bottomDock",dock=DockStyle.Bottom)
        _ioWindow = ioWindow = QDockingWindow(name="IO",dock=DockStyle.Fill,height=200,text="I/O")
        ioWindow.owner = this
        ioWindow.dockWindow(_bottomDock)
        ioWindow.slideWindow(true,false)
        _lblOutput = RichTextBox(parent=ioWindow, dock=DockStyle.Top,name="_lblOutput",autoSize=false,backColor=Color.white, borderStyle = System.Windows.Forms.BorderStyle.FixedSingle, height=400,readOnly=true)
        _lblOut = Label(parent=ioWindow, dock=DockStyle.Top,name="_lblOut",autoSize=true,text="Output:")
        
    def _addNewEditor(title as String) as TextEditorControl
        tabEditor = QTabPage(text=title)
        _tabs.controls.add(tabEditor)
        editor = TextEditorControl(parent=tabEditor, dock=DockStyle.Fill,name="editor",width=480)
        editor.document.foldingManager.foldingStrategy = CobraFoldingStrategy()
        editor.document.foldingManager.updateFoldings(nil,nil)
        listen editor.document.documentChanged, ref _documentChanged
        listen tabEditor.enter, ref _documentTabEntered
        listen editor.activeTextAreaControl.textArea.keyDown, ref _keyDown
        if _editorSettings is nil
            _editorSettings = editor.textEditorProperties
            .onSettingsChanged
        else
            editor.textEditorProperties = _editorSettings
        return editor
        
    def onSettingsChanged
        pass
    
    def _keyDown(sender, e as KeyEventArgs)
        #simple logic to just require Ctrl + <space>
        if not e.control, return
        if not e.keyCode <> Keys.Space, return
        e.suppressKeyPress = true
        _showIntellisense(e.keyValue to char)
        
    def _showIntellisense(value as char)
        pass #TODO : ADD INTELLISENSE
/#
	        ICompletionDataProvider completionDataProvider = new CodeCompletionDataProvider();
	        CodeCompletionWindow window = CodeCompletionWindow.ShowCompletionWindow(this, ActiveEditor, "",
	                                                                                completionDataProvider, value);
#/

    def _documentTabEntered(sender, e as EventArgs)
        page = sender to QTabPage
        page.controls[0].focus
 
    def _documentChanged(sender, e as DocumentEventArgs)
        .setModifiedFlag(_activeEditor,true)
 
    def initializeTabs
        qFillDock = Form(dock=DockStyle.Fill,name="qFillDock")
        qFillDock.mdiParent = this
        qFillDock.windowState = FormWindowState.Maximized
        qFillDock.show
        _tabs = QTabControl(parent=qFillDock,dock=DockStyle.Fill, name="_tabs")
        _addNewEditor("New file")
        _tabTest = QTabPage(text="Test")
        _tabConfig = QTabPage(text="Config")
        _properties = PropertyGrid(parent=_tabConfig,dock=DockStyle.Right,name="_properties",selectedObject=_projectTree,width=300)
        _tabs.controls.add(_tabTest)
        _tabs.controls.add(_tabConfig)

    def initializeToolbar
        pass #_toolStrip = ToolStrip(parent=this,name="_toolStrip",dock=DockStyle.Top)
    def initializeMenus
        _menuStrip = QMainMenu(parent=this,name="_menuStrip",dock=DockStyle.Top)
        
        #File Menu
        _menuFile = QMenuItem(itemName="_menuFile",title="File")
        _menuFileFile = QMenuItem(itemName="_menuFileFile",title="File")
        _menuFileProject = QMenuItem(itemName="_menuFileProject",title="Project")
        
        _menuFileProjectSave = QMenuItem(itemName="_menuFileProjectSave",title="Save")
        listen _menuFileProjectSave.menuItemActivated, ref .menuFileProjectSave_Click
        
        _menuFileProjectSaveAs = QMenuItem(itemName="_menuFileProjectSaveAs",title="Save As")
        listen _menuFileProjectSaveAs.menuItemActivated, ref .menuFileProjectSaveAs_Click
        
        _menuFileProjectOpen = QMenuItem(itemName="_menuFileProjectOpen",title="Open")
        listen _menuFileProjectOpen.menuItemActivated, ref .menuFileProjectOpen_Click
        
        _menuFileProjectNew = QMenuItem(itemName="_menuFileProjectNew",title="New")
        listen _menuFileProjectNew.menuItemActivated, ref .menuFileProjectNew_Click
        
        _menuFileQuit = QMenuItem(itemName="_menuFileQuit",title="&Quit",shortcut=Shortcut.CtrlQ)
        listen _menuFileQuit.menuItemActivated, ref .menuQuit_Click

        _menuFileClose = QMenuItem(itemName="_menuFileClose",title="C&lose",shortcut=Shortcut.CtrlW)
        listen _menuFileClose.menuItemActivated, ref .menuClose_Click


        _menuFileOpen = QMenuItem(itemName="_menuFileOpen",title="&Open",shortcut=Shortcut.CtrlO)
        listen _menuFileOpen.menuItemActivated, ref .menuOpen_Click
        
        _menuFileNew = QMenuItem(itemName="_menuFileNew", title="&New",shortcut=Shortcut.CtrlN)
        listen _menuFileNew.menuItemActivated, ref .menuNew_Click

        _menuFileSaveAs = QMenuItem(itemName="_menuFileSaveAs", title="Save &As",shortcut=Shortcut.CtrlShiftS)
        listen _menuFileSaveAs.menuItemActivated, ref .menuSaveAs_Click
        
        _menuFileSave = QMenuItem(itemName="_menuFileSave", title="&Save",shortcut=Shortcut.CtrlS)
        listen _menuFileSave.menuItemActivated, ref .menuSave_Click

        _menuFileProject.menuItems.add(_menuFileProjectNew)
        _menuFileProject.menuItems.add(_menuFileProjectOpen)
        _menuFileProject.menuItems.add(_menuFileProjectSave)
        _menuFileProject.menuItems.add(_menuFileProjectSaveAs)
        _menuFileFile.menuItems.add(_menuFileNew)
        _menuFileFile.menuItems.add(_menuFileOpen)
        _menuFileFile.menuItems.add(_menuFileSave)
        _menuFileFile.menuItems.add(_menuFileSaveAs)
        _menuFile.menuItems.add(_menuFileProject)
        _menuFile.menuItems.add(_menuFileFile)
        _menuFile.menuItems.add(_menuFileQuit)


        ##################################################################
        #Edit Menu
        menuEdit = QMenuItem(itemName="_menuEdit",title="Edit")
        
        menuEditCut = QMenuItem(itemName="_menuEditCut",title="Cut",shortcut=Shortcut.CtrlX)
        listen menuEditCut.menuItemActivated, ref .menuEditCut_Click
        menuEditCopy = QMenuItem(itemName="_menuEditCopy",title="Copy",shortcut=Shortcut.CtrlC)
        listen menuEditCopy.menuItemActivated, ref .menuEditCopy_Click
        menuEditPaste = QMenuItem(itemName="_menuEditPaste",title="Paste",shortcut=Shortcut.CtrlV)
        listen menuEditPaste.menuItemActivated, ref .menuEditPaste_Click
        menuEditDelete = QMenuItem(itemName="_menuEditDelete",title="Delete")
        listen menuEditDelete.menuItemActivated, ref .menuEditDelete_Click
        menuEditFind = QMenuItem(itemName="_menuEditFind",title="Find",shortcut=Shortcut.CtrlF)
        listen menuEditFind.menuItemActivated, ref .menuEditFind_Click
        menuEditReplace = QMenuItem(itemName="_menuEditReplace",title="Replace",shortcut=Shortcut.CtrlH)
        listen menuEditReplace.menuItemActivated, ref .menuEditReplace_Click
        menuEditFindAgain = QMenuItem(itemName="_menuEditFindAgain",title="Find Again",shortcut=Shortcut.F3)
        listen menuEditFindAgain.menuItemActivated, ref .menuEditFindAgain_Click
        menuEditFindAgainReverse = QMenuItem(itemName="_menuEditFindAgainReverse",title="Find Again Reverse")
        listen menuEditFindAgainReverse.menuItemActivated, ref .menuEditFindAgainReverse_Click

        menuEditFindAndReplace = QMenuItem(itemName="_menuEditFindAndReplace",title="Find And Replace")
        menuEditFindAndReplace.menuItems.add(menuEditFind)
        menuEditFindAndReplace.menuItems.add(menuEditReplace)
        menuEditFindAndReplace.menuItems.add(menuEditFindAgain)
        menuEditFindAndReplace.menuItems.add(menuEditFindAgainReverse)

        
        menuEditToggleBookmark = QMenuItem(itemName="_menuEditToggleBookmark",title="Toggle Bookmark")
        listen menuEditToggleBookmark.menuItemActivated, ref .menuEditToggleBookmark_Click
        menuEditGoToNextBookmark = QMenuItem(itemName="_menuEditGoToNextBookmark",title="Go To Next Bookmark")
        listen menuEditGoToNextBookmark.menuItemActivated, ref .menuEditGoToNextBookmark_Click
        menuEditGoToPrevBookmark = QMenuItem(itemName="_menuEditGoToPreviousBookmark",title="Go To Previous Bookmark")
        listen menuEditGoToPrevBookmark.menuItemActivated, ref .menuEditGoToPrevBookmark_Click

        menuEditBooksmarks = QMenuItem(itemName="_menuEditBookmarks",title="Bookmarks")
        menuEditBooksmarks.menuItems.add(menuEditToggleBookmark)
        menuEditBooksmarks.menuItems.add(menuEditGoToNextBookmark)
        menuEditBooksmarks.menuItems.add(menuEditGoToPrevBookmark)
        
        menuEdit.menuItems.add(menuEditCut)
        menuEdit.menuItems.add(menuEditCopy)
        menuEdit.menuItems.add(menuEditPaste)
        menuEdit.menuItems.add(menuEditDelete)
        menuEdit.menuItems.add(menuEditFindAndReplace)
        menuEdit.menuItems.add(menuEditBooksmarks)

        #####################################################################
        #Compile Menu
        _menuCompile = QMenuItem(itemName="_menuCompile",title="Compile")
        listen _menuCompile.menuItemActivated, ref .menuCompile_Click
        
        _menuCompileBuild = QMenuItem(itemName="_menuCompileBuild",title="&Build",shortcut=Shortcut.CtrlB)
        listen _menuCompileBuild.menuItemActivated, ref .menuCompileBuild_Click
        
        _menuCompileTest = QMenuItem(itemName="_menuCompileTest",title="&Test",shortcut=Shortcut.CtrlT)
        listen _menuCompileTest.menuItemActivated, ref .menuCompileTest_Click
        
        _menuCompileObjectExplorer = QMenuItem(itemName="_menuCompileObjectExplorer",title="Object &Explorer",shortcut=Shortcut.CtrlE)
        listen _menuCompileObjectExplorer.menuItemActivated, ref .menuCompileObjectExplorer_Click
        
        _menuCompileRun = QMenuItem(itemName="_menuCompileRun",title="&Run",shortcut=Shortcut.F5)
        listen _menuCompileRun.menuItemActivated, ref .menuCompileRun_Click

        _menuCompile.menuItems.add(_menuCompileBuild)
        _menuCompile.menuItems.add(_menuCompileTest)
        _menuCompile.menuItems.add(_menuCompileObjectExplorer)
        _menuCompile.menuItems.add(_menuCompileRun)

        _menuStrip.menuItems.add(_menuFile)
        _menuStrip.menuItems.add(menuEdit)
        _menuStrip.menuItems.add(_menuCompile)
        
        
        _contextMenu = QContextMenu(_components)
        mnuAddFile = QMenuItem()
        mnuAddFile.itemName = "mnuAddFile"
        mnuAddFile.title = "Add Existing File"
        mnuAddFile.toolTip = "Add existing file to the project."
        _contextMenu.menuItems.add(mnuAddFile)
        
        mnuNewFile = QMenuItem()
        mnuNewFile.itemName = "mnuNewFile"
        mnuNewFile.title = "Add New File"
        mnuNewFile.toolTip = "Add a new source file to the project."
        
        _contextMenu.menuItems.add(mnuNewFile)
        listen _contextMenu.menuItemSelected, ref .contextMenu_MenuItemSelected
        
        _contextMenu.addListener(_projectTree)
        
    def contextMenu_MenuItemSelected(sender, e as QMenuEventArgs)
        if e.menuItem is nil or e.menuItem.isSeparator, return
        item = e.menuItem
        #TODO: Add logic to handle the particular nodes available.
        if item.itemName == "mnuAddFile"
            pass
        else if item.itemName == "mnuNewFile"
            pass
        
    def menuCompile_Click(sender, e as QMenuEventArgs)
        _menuCompileBuild.enabled = _p is nil
        _menuCompileTest.enabled = _p is nil
        _menuCompileObjectExplorer.enabled = _p is nil
        _menuCompileRun.enabled = _p is nil
        
    def menuCompileBuild_Click(sender, e as QMenuEventArgs)
        .runCobraProcess(" -c -turbo ")
    def menuCompileTest_Click(sender, e as QMenuEventArgs)
        .runCobraProcess(" -test ")
    def menuCompileObjectExplorer_Click(sender, e as QMenuEventArgs)
        .runCobraProcess("")
    def menuCompileRun_Click(sender, e as QMenuEventArgs)
        .runCobraProcess(" ")
        
    var _p as Process?
    def runCobraProcess(args as  String)
        if _p is not nil, return #can't run a second compile process!
        _p = p = Process()
        _ioWindow.slideWindow(false,true)
        _ioWindow.swapDockMode
        p.startInfo.useShellExecute = false
        p.startInfo.redirectStandardOutput = true
        p.startInfo.redirectStandardError = true
        p.startInfo.fileName = r"C:\Cobra\bin\cobra.bat"
        p.enableRaisingEvents = true
        p.startInfo.arguments = args + " [_activeEditor.fileName]"
        .logIO(p.startInfo.fileName + " " + p.startInfo.arguments,Color.blue)
        listen p.outputDataReceived, ref .outputDataReceived
        listen p.errorDataReceived, ref .errorDataReceived
        listen p.exited, ref .processExited
        p.start
        p.beginErrorReadLine
        p.beginOutputReadLine
    
    def outputDataReceived(sender, e as DataReceivedEventArgs)
        .logIO(e.data,Color.black)
        
    def errorDataReceived(sender, e as DataReceivedEventArgs)
        .logIO(e.data,Color.maroon)
        
    def logIO(msg as String?, color as Color)
        if msg is nil, return
        start = _lblOutput.textLength
        _lblOutput.appendText(msg)
        enda = _lblOutput.textLength
        _lblOutput.select(start,enda-start)
        _lblOutput.selectionColor = color
        _lblOutput.selectionLength=0
        _lblOutput.appendText("\r\n")
        
    def processExited(sender, e as EventArgs)
        .logIO("Process Exited\r\n",Color.black)
        ignore _p.outputDataReceived, ref .outputDataReceived
        ignore _p.errorDataReceived, ref .errorDataReceived
        ignore _p.exited, ref .processExited
        _ioWindow.swapDockMode
        _ioWindow.slideWindow(true,true)
        _p = nil

    def menuFileProjectSave_Click(sender, e as QMenuEventArgs)
        pass
        
    def menuFileProjectSaveAs_Click(sender, e as QMenuEventArgs)
        pass
        
    def menuFileProjectOpen_Click(sender, e as QMenuEventArgs)
        pass
        
    def menuFileProjectNew_Click(sender, e as QMenuEventArgs)
        pass



    def menuSaveAs_Click(sender, e as QMenuEventArgs)
        if _activeEditor is not nil
            .saveAsChanges(_activeEditor to !)

    def menuSave_Click(sender, e as QMenuEventArgs)
        editor = _activeEditor
        if editor is not nil
            .saveChanges(editor)

    def menuNew_Click(sender, e as QMenuEventArgs)
        _addNewEditor("New file")
        
    def menuOpen_Click(sender, e as QMenuEventArgs)
        fileName = .promptForOpenFileName
        if fileName <> ""
            .setEditorText(fileName)
            
            if _activeEditor is not nil and _activeEditor.document.textLength and String.isNullOrEmpty(_activeEditor.fileName)
                _removeTextEditor(_activeEditor to !)
            
    def menuClose_Click(sender, e as QMenuEventArgs)
        if _activeEditor is not nil
            _removeTextEditor(_activeEditor to !)
    def _removeTextEditor(editor as TextEditorControl)
        _tabs.controls.remove(editor.parent)
    
    def menuQuit_Click(sender, e as QMenuEventArgs)
        .close
        
    def _formClosing(sender, e as FormClosingEventArgs)
        for editor in _allEditors
            if .isModified(editor)
                result = MessageBox.show("Save changes to [editor.fileName?'new file']?","Save?",MessageBoxButtons.YesNoCancel,MessageBoxIcon.Question)
                if result == DialogResult.Cancel
                    e.cancel = true
                else if result == DialogResult.Yes
                    if not .saveAsChanges(editor)
                        e.cancel = true

    def setEditorText(fileName as String)
        editor = _addNewEditor("[System.IO.Path.getFileName(fileName)]")
        try
            editor.loadFile(fileName)
            .setModifiedFlag(editor,false)
        catch ex as Exception
            MessageBox.show(ex.message,ex.typeOf.name)
            _removeTextEditor(editor)
            return
        #editor.tag = fileName
        editor.document.foldingManager.foldingStrategy = CobraFoldingStrategy()
        editor.document.foldingManager.updateFoldings(nil,nil)
    
    def isModified(editor as TextEditorControl) as bool
        return editor.parent.text.endsWith("*")
        
    def setModifiedFlag(editor as TextEditorControl?, flag as bool)
        if editor is nil, return
        isModified = .isModified(editor to !)
        if isModified <> flag
            p = editor.parent
            if isModified
                p.text = p.text.substring(0,p.text.length-1)
            else
                p.text +="*"


    def saveChanges(editor as TextEditorControl) as bool
        if String.isNullOrEmpty(editor.fileName)
            return .saveAsChanges(editor)
        
        try
            editor.saveFile(editor.fileName)
            .setModifiedFlag(editor,false)
            return true
        catch ex as Exception
            MessageBox.show(ex.message,ex.typeOf.name)
            return false
        
    
    def saveAsChanges(editor as TextEditorControl) as bool
        dlg = SaveFileDialog()
        dlg.fileName = editor.fileName
        dlg.filter = "Cobra files|*.cobra"
        dlg.filterIndex = 1
        if dlg.showDialog == DialogResult.OK
            try
                editor.saveFile(dlg.fileName)
                editor.parent.text = Path.getFileName(editor.fileName)
                .setModifiedFlag(editor,false)
                
                editor.document.highlightingStrategy = HighlightingStrategyFactory.createHighlightingStrategyForFile(editor.fileName)
                return true
            catch ex as Exception
                MessageBox.show(ex.message, ex.typeOf.name)
        return false
    
    def promptForOpenFileName as String
        dlg = OpenFileDialog()
        dlg.filter = "Cobra files|*.cobra"
        dlg.filterIndex = 1
        if dlg.showDialog == DialogResult.OK
            return dlg.fileName ? ""
        return ""            


    #this following function / logic is 100% port from the TextEditorForm sample on CodeProject
    #in fact the Edito Menu is pretty much a port of the TextEditorForm sample
    def _doEditAction(editor as TextEditorControl?, action as ICSharpCode.TextEditor.Actions.IEditAction?)
        if editor is nil or action is nil, return
        
        area = editor.activeTextAreaControl.textArea
        editor.beginUpdate
        try
            lock editor.document
                action.execute(area)
                if area.selectionManager.hasSomethingSelected and area.autoClearSelection
                    if area.document.textEditorProperties.documentSelectionMode == DocumentSelectionMode.Normal
                        area.selectionManager.clearSelection
        finally
            editor.endUpdate
            area.caret.updateCaretPosition

    def menuEditCut_Click(sender, e as QMenuEventArgs)
        if _haveSelection
            _doEditAction(_activeEditor,Actions.Cut())
        
    def menuEditCopy_Click(sender, e as QMenuEventArgs)
        if _haveSelection
            _doEditAction(_activeEditor,Actions.Copy())
        
    def menuEditPaste_Click(sender, e as QMenuEventArgs)
        if _haveSelection
            _doEditAction(_activeEditor,Actions.Paste())
        
    def menuEditDelete_Click(sender, e as QMenuEventArgs)
        if _haveSelection
            _doEditAction(_activeEditor,Actions.Delete())

    def _haveSelection as bool
        return _activeEditor is not nil and _activeEditor.activeTextAreaControl.textArea.selectionManager.hasSomethingSelected

    def menuEditFind_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _findForm.showFor(_activeEditor to !,false)
        
    def menuEditReplace_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _findForm.showFor(_activeEditor to !,true)
        
    def menuEditFindAgain_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _findForm.findNext(true,false,"Search text '[_findForm.lookFor]' not found.")
        
    def menuEditFindAgainReverse_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _findForm.findNext(true,true,"Search text '[_findForm.lookFor]' not found.")

    def menuEditToggleBookmark_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _doEditAction(_activeEditor to !,Actions.ToggleBookmark())
        _activeEditor.isIconBarVisible = _activeEditor.document.bookmarkManager.marks.count > 0
        
    def menuEditGoToNextBookmark_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _doEditAction(_activeEditor to !,Actions.GotoNextBookmark(do(bookmark as Bookmark)=true))
    
    def menuEditGoToPrevBookmark_Click(sender, e as QMenuEventArgs)
        if _activeEditor is nil, return
        _doEditAction(_activeEditor to !,Actions.GotoPrevBookmark(do(bookmark as Bookmark)=true))



enum CompilerValue
    NotSet
    Set
    HasValue

enum BackEnd
    None
    CLR
    JVM
    ObjC
    


class Program

    def main is shared
        has STAThread
        Application.run(Editor())