use fastJSON
use System.Windows.Forms from System.Windows.Forms
use Qios.DevSuite.Components
use System.Drawing

class Solution
    pro projects from var = List<of Project>()
    pro startupProject from var as Project?
    pro name from var = "New Solution"
    pro fileName from var = ""
    
    cue init
        base.init

    def save
        if .fileName == ""
            dlg = SaveFileDialog()
            dlg.fileName = .fileName
            dlg.filter = "Cobra Solution files|*.cobrasln"
            dlg.filterIndex = 1
            if dlg.showDialog == DialogResult.OK
                .fileName = dlg.fileName to !
                
        try
            System.IO.File.writeAllText(.fileName, fastJSON.JSON.instance.toJSON(this))
            
            for project in .projects
                project.save
        catch ex as Exception
            MessageBox.show(ex.message, ex.typeOf.name)
        
    def load(fileName as String) as Solution is shared
        try
            
            result = fastJSON.JSON.instance.toObject(System.IO.File.readAllText(fileName)) to Solution
            result.fileName = fileName #just in case it got overwritten in the deserialization
            return result
        catch ex as Exception
            MessageBox.show(ex.message, ex.typeOf.name)
            return Solution()

class SolutionTree inherits TreeView
    var _sln as Solution?
    var _contextMenu as QContextMenu
    var _components as System.ComponentModel.IContainer? #
    
    pro solution as Solution?
        get
            return _sln
        set 
            _sln = value
            _initializeSolutionNodes
    
    var _solutionNode as TreeNode?
    
    cue init
        base.init
        _components =System.ComponentModel.Container()
        _initializeContextMenu
        
    cue init(sln as Solution)
        base.init
        .solution = sln
        _components =System.ComponentModel.Container()
        _initializeContextMenu

    def findNodes(text as String) as List<of TreeNode>
        return .findNodes(.nodes[0],text)
        
        
    def findNodes(root as TreeNode, text as String) as List<of TreeNode>
        result = List<of TreeNode>()
        if root.text.toUpper==text.toUpper
            result.add(root)
        
        for node in root.nodes
            subNodes = .findNodes(node, text)
            if subNodes.count >0
                result.addRange(subNodes)
                
        return result

    def _initializeContextMenu
        _contextMenu = QContextMenu(_components)
        mnuAddReference = QMenuItem()
        mnuAddReference.itemName = "mnuAddReference"
        mnuAddReference.title = "Add a Reference"
        mnuAddReference.toolTip = "Add a Reference to the project."
        _contextMenu.menuItems.add(mnuAddReference)

        
        mnuAddFile = QMenuItem()
        mnuAddFile.itemName = "mnuAddFile"
        mnuAddFile.title = "Add Existing File"
        mnuAddFile.toolTip = "Add existing file to the project."
        _contextMenu.menuItems.add(mnuAddFile)
        
        mnuRemoveFile = QMenuItem()
        mnuRemoveFile.itemName = "mnuRemoveFile"
        mnuRemoveFile.title = "Remove Existing File"
        mnuRemoveFile.toolTip = "Remove file from the project."
        _contextMenu.menuItems.add(mnuRemoveFile)
        
        
        mnuNewFile = QMenuItem()
        mnuNewFile.itemName = "mnuNewFile"
        mnuNewFile.title = "Add New File"
        mnuNewFile.toolTip = "Add a new source file to the project."
        
        _contextMenu.menuItems.add(mnuNewFile)
        
        mnuNewProject = QMenuItem()
        mnuNewProject.itemName = "mnuNewProject"
        mnuNewProject.title = "Add New Project"
        mnuNewProject.toolTip = "Add a new project to the solution."

        _contextMenu.menuItems.add(mnuNewProject)

        mnuAddProject = QMenuItem()
        mnuAddProject.itemName = "mnuAddProject"
        mnuAddProject.title = "Add Existing Project"
        mnuAddProject.toolTip = "Add existing project to the solution."

        _contextMenu.menuItems.add(mnuAddProject)

        mnuRename = QMenuItem()
        mnuRename.itemName = "mnuRename"
        mnuRename.title = "Rename"
        mnuRename.toolTip = "Rename the item."

        _contextMenu.menuItems.add(mnuRename)


        
        listen _contextMenu.menuItemActivated, ref .contextMenu_MenuItemSelected
        
        _contextMenu.addListener(this)
        
    def contextMenu_MenuItemSelected(sender, e as QMenuEventArgs)
        if e.menuItem is nil or e.menuItem.isSeparator, return
        item = e.menuItem
        #TODO: Add logic to handle the particular nodes available.
        branch item.itemName
            on "mnuAddFile"
                newFile = NajaUtils.promptForOpenFileName       
                if newFile == "", return
                .addFile(newFile, _solutionNode.nodes[0] to !)
            #on "mnuNewFile"
            #    pass
            #on "mnuNewProject"
            #    pass
            #on "mnuAddProject"
            #    pass
            on "mnuRename"
                if .selectedNode == nil or .selectedNode.tag == nil
                    return
                fileName = .selectedNode.tag.toString
                if not System.IO.File.exists(fileName) and fileName <> "New File"
                    return
                shortFileName = System.IO.Path.getFileName(fileName) to !
                if NajaUtils.inputBox("Rename file","Enter a new file name:", inout shortFileName ) == DialogResult.OK
                    newFileName = System.IO.Path.combine(System.IO.Path.getDirectoryName(fileName),shortFileName)
                    if fileName <> "New File"
                        System.IO.File.move(fileName,newFileName)
                    .selectedNode.tag = newFileName
                    .selectedNode.text = shortFileName
                    .selectedNode.name = newFileName
                
            on "mnuRemoveFile"
                trace .selectedNode
                if .selectedNode == nil or  .selectedNode.tag  == nil 
                    return
                fileName = .selectedNode.tag.toString
                if not System.IO.File.exists(fileName) and fileName <> "New File"
                    return
                .removeFile(.selectedNode to !, _solutionNode.nodes[0] to !)
            on "mnuAddReference"
                newFile = NajaUtils.promptForOpenFileName("DLL files (*.dll)|*.dll")
                if newFile =="", return
                .addReference(newFile, _solutionNode.nodes[0] to !)
            else
                MessageBox.show("Not implemented yet!")

    def _initializeSolutionNodes
        .nodes.clear
        
        sln = TreeNode(name="Solution",text="Solution '[.solution.name]' ([.solution.projects.count] projects)")
        _solutionNode = sln
        sln.tag = .solution
        .nodes.add(sln)
        for project in .solution.projects
            _initializeProjectNode(project, project == .solution.startupProject)
        sln.expand
        
    def _initializeProjectNode(project as Project, isStartup as bool) as TreeNode
        pj = TreeNode(name="Project|[project.name]",text=project.name + " ")
        if isStartup
            pj.nodeFont = Font(pj.nodeFont,pj.nodeFont.style | FontStyle.Bold)
        pj.tag = project
        _solutionNode.nodes.add(pj)
        
        #references
        references = TreeNode(name="References|[project.name]",text="References")
        pj.nodes.add(references)
        
        for reference in project.references
            prefix = ""
            if reference in ["mscorlib.dll","System.dll","Cobra.Lang.dll"], prefix = "DEFAULT|"
            references.nodes.add(TreeNode(name=prefix+reference,text=System.IO.Path.getFileName(reference).replace(".dll","") + " ",tag=reference))
        
        #files
        files = TreeNode(name="Files|[project.name]",text="Files")
        pj.nodes.add(files)
        for file in project.files
            files.nodes.add(TreeNode(name=file,text=System.IO.Path.getFileName(file),tag=file))
            
        files.expand
        references.expand
        pj.expand
        return pj

    def closeSolution
        .solution = Solution()

    def addProject(project as Project) as TreeNode
        if _solutionNode is nil
            .solution = Solution()
        projectNode= _initializeProjectNode(project, false)
        .solution.projects.add(project)
        return projectNode
        
    def removeProject(projectNode as TreeNode)
        if _solutionNode is nil, return
        _solutionNode.nodes.remove(projectNode)
        .solution.projects.remove(projectNode.tag to Project)
        
    def addReference(reference as String,projectNode as TreeNode) as TreeNode
        referenceNode = TreeNode(name=reference,text=System.IO.Path.getFileName(reference).replace(".dll","") + " ",tag=reference)
        projectNode.nodes["References|[(projectNode.tag to Project).name]"].nodes.add(referenceNode)
        (projectNode.tag to Project).references.add(reference)
        return referenceNode
        
    def addFile(file as String, projectNode as TreeNode) as TreeNode
        fileNode = TreeNode(name=file,text=System.IO.Path.getFileName(file),tag=file)
        projName = (projectNode.tag to Project).name
        projectNode.nodes["Files|[projName]"].nodes.add(fileNode)
        (projectNode.tag to Project).files.add(file)
        return fileNode
        
    def removeReference(referenceNode as TreeNode, projectNode as TreeNode)
        if referenceNode.name.startsWith("DEFAULT|"), return #can't get rid of the default references. 
        projectNode.nodes["References|[(projectNode.tag to Project).name]"].nodes.remove(referenceNode)
        (projectNode.tag to Project).references.remove(referenceNode.text)
        
    def removeFile(fileNode as TreeNode, projectNode as TreeNode)
        projectNode.nodes["Files|[(projectNode.tag to Project).name]"].nodes.remove(fileNode)
        (projectNode.tag to Project).files.remove(fileNode.text)

class Project
    pro references from var = List<of String>()
    pro files from var = List<of String>()
    pro name from var = "New Project"
    pro fileName from var = ""
    
    cue init
        base.init
    
    def save
        if .fileName == ""
            dlg = SaveFileDialog()
            dlg.fileName = .fileName
            dlg.filter = "Cobra Project files|*.cobraproj"
            dlg.filterIndex = 1
            if dlg.showDialog == DialogResult.OK
                .fileName = dlg.fileName to !
                
        try
            System.IO.File.writeAllText(.fileName, fastJSON.JSON.instance.toJSON(this))
        catch ex as Exception
            MessageBox.show(ex.message, ex.typeOf.name)
        
    def load(fileName as String) as Project is shared
        try
            
            result = fastJSON.JSON.instance.toObject(System.IO.File.readAllText(fileName)) to Project
            result.fileName = fileName #just in case it got overwritten in the deserialization
            return result
        catch ex as Exception
            MessageBox.show(ex.message, ex.typeOf.name)
            return Project()
            
