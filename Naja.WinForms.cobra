use Cobra.Lang.Compiler 
class Naja is partial
#region Form Generation
    var _mgr = DesignSurfaceManagerExt()
    
    def menuAddForm_Click(sender, e as QMenuEventArgs)
        tab = QTabPage(text="Design")
        
        #tools
        toolStrip = QToolBar()
        toolStrip.dock = DockStyle.Top
        btnSave = QToolItem("Generate Code")
        toolStrip.toolItems.add(btnSave)
        listen btnSave.menuItemActivated, ref .menuFormSave_Click
        
        #toolbox
        controlsList = ListBox()
        controlsList.dock = DockStyle.Left

        toolPointer = System.Drawing.Design.ToolboxItem()
        toolPointer.displayName = "<Pointer>"
        toolPointer.bitmap = System.Drawing.Bitmap(16, 16)
        controlsList.items.add(toolPointer)
        controlsList.items.add(ToolboxItem(Button))
        controlsList.items.add(ToolboxItem(ListView))
        controlsList.items.add(ToolboxItem(TreeView))
        controlsList.items.add(ToolboxItem(TextBox))
        controlsList.items.add(ToolboxItem(Label))
        controlsList.items.add(ToolboxItem(TabControl))
        controlsList.items.add(ToolboxItem(OpenFileDialog))
        controlsList.items.add(ToolboxItem(CheckBox))
        controlsList.items.add(ToolboxItem(ComboBox))
        controlsList.items.add(ToolboxItem(GroupBox))
        controlsList.items.add(ToolboxItem(ImageList))
        controlsList.items.add(ToolboxItem(Panel))
        controlsList.items.add(ToolboxItem(ProgressBar))
        controlsList.items.add(ToolboxItem(ToolBar))
        controlsList.items.add(ToolboxItem(ToolTip))
        controlsList.items.add(ToolboxItem(StatusBar))

        #forms designer
        _mgr.createFormDesigner(tab, controlsList, ref .onToolChanged)
        serv = _mgr.designSurfaces[_mgr.designSurfaces.count-1].getService(IComponentChangeService) to IComponentChangeService
        listen serv.componentAdded, ref .serv_ComponentAdded
        listen serv.componentChanged, ref .serv_ComponentChanged
        listen serv.componentRemoved, ref .serv_ComponentRemoved
        listen serv.componentRename, ref .serv_ComponentRename
        
        _mgr.propertyGridHost.dock = DockStyle.Right
        _mgr.propertyGridHost.width = 250
        
        tab.controls.add(_mgr.propertyGridHost)
        tab.controls.add(controlsList)
        tab.controls.add(toolStrip)
        _tabs.controls.add(tab)

    def menuFormSave_Click(sender, e as QMenuEventArgs)
        content = StringBuilder()
        content.appendLine("use System.Drawing")
        content.appendLine("use System.Windows.Forms")
        content.appendLine
        content.appendLine("#Autogenerated UI Form")
        content.appendLine("#To use:")
        content.appendLine("#  * make your class partial as well.  Do not edit the generated file.")
        content.appendLine("#  * in the 'cue init', add a call to initializeComponent")
        content.appendLine
        content.appendLine

        currentIndent = "    "
        formName = "GeneratedForm"

        declarations = StringBuilder()
        for component in .currentComponents.keys
        
            if formName == "GeneratedForm" and component inherits Control
                formName = (component to Control).findForm.name to !
                formName = formName[0:1].toUpper + formName[1:]
            
            declarations.append(currentIndent)
            declarations.append("var ")
            declarations.append(Utils.cobraNameForSharpMemberName(component.site.name to !))
            declarations.append(" as ")
            declarations.appendLine(component.typeOf.fullName)
        
        content.append("class ")
        content.append(formName)
        content.appendLine(" is partial inherits Form")

        content.appendLine(declarations.toString)

        content.append(currentIndent)
        content.appendLine("def initializeComponent")

        content.append(currentIndent)
        currentIndent = "        "
        content.appendLine("#Instantiate the components")
        for component in .currentComponents.keys
            content.append(currentIndent)
            currentVar = Utils.cobraNameForSharpMemberName(component.site.name to !)
            if not currentVar.startsWith("_"), content.append(".")
            content.append(currentVar)
            content.append(" = ")
            content.append(component.typeOf.fullName)
            content.appendLine("()")

        content.appendLine(currentIndent)
        content.append(currentIndent)
        content.appendLine("#Now initialize the components")
        controlsList = List<of ComponentChangedEventArgs>()

        for changed in .componentChanged
            content.appendLine(currentIndent)
            content.append(currentIndent)
            content.appendLine("##############################")
            content.append(currentIndent)
            content.append("# ")
            currentVar = Utils.cobraNameForSharpMemberName(changed.key.site.name to !)
            content.appendLine(currentVar)
            content.append(currentIndent)
            content.appendLine("##############################")
            content.appendLine(currentIndent)


            for changedEventArg in changed.value.values
                if changedEventArg.newValue == nil, continue
            
                if changedEventArg.member.name == "Controls"
                    controlsList.add(changedEventArg)
                    continue #That is not for this part of the loop

                content.append(currentIndent)
                if changed.key.site.name.toLower <> formName.toLower
                    content.append(".")
                    content.append(currentVar)
                
                content.append(".")
                content.append(Utils.cobraNameForSharpMemberName(changedEventArg.member.name to !))
                content.append(" = ")

                prop =  changedEventArg.member to PropertyDescriptor
                
                propertyType = prop.propertyType.name
                if propertyType == "String"
                    content.append("'")
                    content.append(changedEventArg.newValue.toString)
                    content.append("'")
                
                else if propertyType == "Point"
                    content.append("Point(")
                    content.append((changedEventArg.newValue to Point ).x)
                    content.append(",")
                    content.append((changedEventArg.newValue to Point ).y)
                    content.append(")")
                
                else if propertyType == "Size"
                    content.append("Size(")
                    content.append((changedEventArg.newValue to Size).width)
                    content.append(",")
                    content.append((changedEventArg.newValue to Size).height)
                    content.append(")")
                
                else if propertyType == "Color"
                    content.append("Color.fromName('")
                    content.append((changedEventArg.newValue to Color).name)
                    content.append("')")
                
                else if propertyType == "Int32"
                    content.append(changedEventArg.newValue.toString)
                else if propertyType == "Boolean"
                    content.append(changedEventArg.newValue.toString.toLower)
                else
                    content.append(changedEventArg.newValue.toString)
                content.appendLine

        content.appendLine(currentIndent)
        content.append(currentIndent)
        content.appendLine("#Add the components to their parent control")

        for changedEventArg in controlsList
            controls = changedEventArg.newValue to System.Windows.Forms.Control.ControlCollection
            if controls.count == 0, continue

            comp = changedEventArg.component to IComponent

            content.append(currentIndent)
            if comp.site.name.toLower <> formName.toLower
                if not currentVar.startsWith("_"), content.append(".")
                content.append(Utils.cobraNameForSharpMemberName(comp.site.name to !))
            
            content.append(".controls.addRange(@\[")
            lstControls = List<of String>()
            for c in controls
                lstControls.add("." + Utils.cobraNameForSharpMemberName(c.name to !))
            
            content.append(String.join(",", lstControls.toArray))
            content.appendLine("])")
        
        _addNewEditor("Generated - [formName]").text = content.toString
        #MessageBox.show(content.toString)
            

    var componentRenames = Dictionary<of IComponent, KeyValuePair<of String, String>>()
    def serv_ComponentRename(sender, e as ComponentRenameEventArgs)
        .componentRenames[e.component to IComponent] = KeyValuePair<of String,String>(e.newName,e.oldName)
    
    def serv_ComponentRemoved(sender, e as ComponentEventArgs)
        if .componentRenames.containsKey(e.component)
            .componentRenames.remove(e.component)
        if .componentChanged.containsKey(e.component)
            .componentChanged.remove(e.component)
        if .currentComponents.containsKey(e.component)
            .currentComponents.remove(e.component)
        

    var componentChanged = Dictionary<of IComponent, Dictionary<of String, ComponentChangedEventArgs>>()
    def serv_ComponentChanged(sender, e as ComponentChangedEventArgs)
        changes = Dictionary<of String, ComponentChangedEventArgs>()
        if not .componentChanged.tryGetValue(e.component to IComponent, out changes)
            changes = Dictionary<of String, ComponentChangedEventArgs>()
            .componentChanged[e.component to IComponent] = changes
        changes[e.member.name] = e
        
    var currentComponents = Dictionary<of IComponent, bool>()
    def serv_ComponentAdded(sender, e as ComponentEventArgs)
        .currentComponents[e.component] = true
    
    
    def onToolChanged(sender, e as EventArgs)
        isurf = .getCurrentIDesignSurface
        if isurf is nil, return
        
        selectionService = isurf.getIDesignerHost.getService(ISelectionService) to ISelectionService
        _mgr.propertyGridHost.selectedObject = selectionService.primarySelection
        
    def getCurrentIDesignSurface as IDesignSurfaceExt2?
        #TODO: MAKE THIS SO IT CAN SUPPORT MORE THAN ONE DESIGNSURFACE
        index = 0 #_tabs.selectedIndex
        if index >= ((_mgr to System.ComponentModel.Design.DesignSurfaceManager).designSurfaces).count, return nil
        
        surface = _mgr.designSurfaces[index]
        return surface to IDesignSurfaceExt2
        
       
#endregion